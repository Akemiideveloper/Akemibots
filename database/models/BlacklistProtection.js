const Blacklist = require('./Blacklist');
const ModerationLog = require('./ModerationLog');

class BlacklistProtection {
  // Inicializar prote√ß√£o contra desbans
  static initializeProtection(client) {
    console.log('üõ°Ô∏è Inicializando prote√ß√£o de blacklist...');
    
    // Listener para eventos de desban
    client.on('guildBanRemove', async (ban) => {
      try {
        await this.handleUnbanAttempt(ban);
      } catch (error) {
        console.error('Erro na prote√ß√£o de blacklist:', error);
      }
    });

    console.log('‚úÖ Prote√ß√£o de blacklist ativada');
  }

  // Verificar e reverter tentativas de desban de usu√°rios na blacklist
  static async handleUnbanAttempt(ban) {
    const { guild, user } = ban;
    
    console.log(`üîç Verificando desban: ${user.tag} (${user.id}) no servidor ${guild.name}`);
    
    try {
      // Verificar se usu√°rio est√° na blacklist
      const blacklistEntry = await Blacklist.isBlacklisted(guild.id, user.id);
      
      if (!blacklistEntry) {
        console.log(`‚úÖ Desban permitido: ${user.tag} n√£o est√° na blacklist`);
        return;
      }

      console.log(`üö´ Desban bloqueado: ${user.tag} est√° na blacklist`);

      // Re-banir o usu√°rio imediatamente
      await this.rebanUser(guild, user, blacklistEntry);
      
      // Log da prote√ß√£o ativada
      await this.logProtectionActivated(guild, user, blacklistEntry);
      
    } catch (error) {
      console.error(`Erro ao processar desban de ${user.tag}:`, error);
    }
  }

  // Re-banir usu√°rio que est√° na blacklist
  static async rebanUser(guild, user, blacklistEntry) {
    try {
      const reason = `[BLACKLIST] Prote√ß√£o autom√°tica ativada - Motivo original: ${blacklistEntry.reason || 'Sem motivo especificado'}`;
      
      await guild.members.ban(user.id, {
        reason: reason,
        deleteMessageDays: 0 // N√£o deletar mensagens na prote√ß√£o autom√°tica
      });

      console.log(`üîí Usu√°rio re-banido automaticamente: ${user.tag}`);
      
      // Enviar notifica√ß√£o para canal de logs
      await this.sendProtectionNotification(guild, user, blacklistEntry, 'AUTO_REBAN');
      
    } catch (error) {
      console.error(`Erro ao re-banir ${user.tag}:`, error);
      
      // Se falhar o re-ban, enviar alerta cr√≠tico
      await this.sendCriticalAlert(guild, user, blacklistEntry, error);
    }
  }

  // Log da ativa√ß√£o da prote√ß√£o
  static async logProtectionActivated(guild, user, blacklistEntry) {
    try {
      await ModerationLog.log(
        guild.id,
        user.id,
        'SYSTEM', // ID do sistema
        'BLACKLIST_PROTECTION',
        `Prote√ß√£o ativada - usu√°rio re-banido automaticamente. Motivo original: ${blacklistEntry.reason || 'Sem motivo'}`
      );
    } catch (error) {
      console.error('Erro ao registrar log de prote√ß√£o:', error);
    }
  }

  // Enviar notifica√ß√£o de prote√ß√£o ativada
  static async sendProtectionNotification(guild, user, blacklistEntry, action) {
    try {
      const { EmbedBuilder } = require('discord.js');
      const ServerConfig = require('./ServerConfig');
      
      const config = await ServerConfig.getServerConfig(guild.id);
      const logChannelId = config.logChannels.blacklist || config.logChannels.moderation;

      if (!logChannelId) {
        console.log('Nenhum canal de log configurado para blacklist');
        return;
      }

      const logChannel = guild.channels.cache.get(logChannelId);
      if (!logChannel) {
        console.log(`Canal de log n√£o encontrado: ${logChannelId}`);
        return;
      }

      const embed = new EmbedBuilder()
        .setColor('#ff0000')
        .setTitle('üõ°Ô∏è Prote√ß√£o de Blacklist Ativada')
        .setDescription('Um usu√°rio na blacklist foi automaticamente re-banido ap√≥s tentativa de desban')
        .addFields(
          { name: 'Usu√°rio Protegido', value: `${user.tag}\n${user.id}`, inline: true },
          { name: 'A√ß√£o', value: action === 'AUTO_REBAN' ? 'Re-banimento Autom√°tico' : 'Prote√ß√£o Ativada', inline: true },
          { name: 'Status', value: 'Blacklist mantida', inline: true },
          { name: 'Motivo Original da Blacklist', value: blacklistEntry.reason || 'Sem motivo especificado', inline: false },
          { name: 'Adicionado √† Blacklist por', value: blacklistEntry.added_by_tag || 'Desconhecido', inline: true },
          { name: 'Data da Blacklist', value: `<t:${Math.floor(new Date(blacklistEntry.added_at).getTime() / 1000)}:F>`, inline: true }
        )
        .setThumbnail(user.displayAvatarURL({ dynamic: true }))
        .setFooter({ text: 'Sistema de Prote√ß√£o de Blacklist' })
        .setTimestamp();

      await logChannel.send({ embeds: [embed] });
      console.log(`Notifica√ß√£o de prote√ß√£o enviada para ${logChannel.name}`);

    } catch (error) {
      console.error('Erro ao enviar notifica√ß√£o de prote√ß√£o:', error);
    }
  }

  // Enviar alerta cr√≠tico se n√£o conseguir re-banir
  static async sendCriticalAlert(guild, user, blacklistEntry, error) {
    try {
      const { EmbedBuilder } = require('discord.js');
      const ServerConfig = require('./ServerConfig');
      
      const config = await ServerConfig.getServerConfig(guild.id);
      const logChannelId = config.logChannels.blacklist || config.logChannels.moderation;

      if (!logChannelId) {
        console.log('Nenhum canal de log configurado para alerta cr√≠tico');
        return;
      }

      const logChannel = guild.channels.cache.get(logChannelId);
      if (!logChannel) {
        console.log(`Canal de log n√£o encontrado para alerta cr√≠tico: ${logChannelId}`);
        return;
      }

      const embed = new EmbedBuilder()
        .setColor('#ff0000')
        .setTitle('üö® ALERTA CR√çTICO - Falha na Prote√ß√£o de Blacklist')
        .setDescription('N√£o foi poss√≠vel re-banir um usu√°rio da blacklist automaticamente!')
        .addFields(
          { name: 'Usu√°rio', value: `${user.tag}\n${user.id}`, inline: true },
          { name: 'Status', value: '‚ö†Ô∏è DESBANIDO (BLACKLIST ATIVA)', inline: true },
          { name: 'A√ß√£o Necess√°ria', value: 'Banir manualmente o usu√°rio', inline: true },
          { name: 'Motivo da Blacklist', value: blacklistEntry.reason || 'Sem motivo especificado', inline: false },
          { name: 'Erro', value: error.message || 'Erro desconhecido', inline: false }
        )
        .setThumbnail(user.displayAvatarURL({ dynamic: true }))
        .setFooter({ text: 'Sistema de Prote√ß√£o de Blacklist - A√á√ÉO MANUAL NECESS√ÅRIA' })
        .setTimestamp();

      await logChannel.send({ 
        content: '@here **ATEN√á√ÉO MODERADORES**', 
        embeds: [embed] 
      });
      
      console.log(`üö® Alerta cr√≠tico enviado para ${logChannel.name}`);

    } catch (error) {
      console.error('Erro ao enviar alerta cr√≠tico:', error);
    }
  }

  // Verificar se desban √© permitido (para uso em comandos)
  static async isUnbanAllowed(guildId, userId) {
    try {
      const blacklistEntry = await Blacklist.isBlacklisted(guildId, userId);
      return !blacklistEntry; // Permitido se N√ÉO estiver na blacklist
    } catch (error) {
      console.error('Erro ao verificar permiss√£o de desban:', error);
      return false; // Em caso de erro, negar por seguran√ßa
    }
  }

  // Verificar blacklist com informa√ß√µes detalhadas
  static async checkBlacklistStatus(guildId, userId) {
    try {
      const blacklistEntry = await Blacklist.isBlacklisted(guildId, userId);
      
      if (blacklistEntry) {
        return {
          isBlacklisted: true,
          entry: blacklistEntry,
          canUnban: false,
          reason: blacklistEntry.reason || 'Sem motivo especificado'
        };
      }
      
      return {
        isBlacklisted: false,
        entry: null,
        canUnban: true,
        reason: null
      };
    } catch (error) {
      console.error('Erro ao verificar status da blacklist:', error);
      return {
        isBlacklisted: true, // Por seguran√ßa, assumir que est√° na blacklist em caso de erro
        entry: null,
        canUnban: false,
        reason: 'Erro ao verificar blacklist'
      };
    }
  }
}

module.exports = BlacklistProtection;